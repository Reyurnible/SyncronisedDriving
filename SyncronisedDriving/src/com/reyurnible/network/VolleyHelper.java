package com.reyurnible.network;import java.security.KeyStore;import org.apache.http.HttpVersion;import org.apache.http.client.CookieStore;import org.apache.http.client.HttpClient;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.impl.client.BasicCookieStore;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import android.app.ActivityManager;import android.content.Context;import com.android.volley.RequestQueue;import com.android.volley.toolbox.HttpClientStack;import com.android.volley.toolbox.HttpStack;import com.android.volley.toolbox.Volley;//RequestQueuesを管理するクラス。//シングルトン制御public class VolleyHelper{    public static final Object lock = new Object();        //private static RequestQueue requestQueue;    private static RequestQueue mRequestQueue;    private static CustomImageLoader mImageLoader;    private static CookieStore mCookieStore;        /**     * RequestQueueのシングルトン生成     * @param context アプリケーションコンテキスト     * @return     */    public static RequestQueue getRequestQueue(final Context context) {        synchronized (lock) {            if (mRequestQueue == null) {            	//TODO            	//resource from : http://stackoverflow.com/questions/16680701/using-cookies-with-android-volley-library            	DefaultHttpClient httpclient = getNewHttpClient();            	mCookieStore = new BasicCookieStore();            	httpclient.setCookieStore( mCookieStore );            	HttpStack httpStack = new HttpClientStack(httpclient);            	                mRequestQueue = Volley.newRequestQueue(context,httpStack);            }            return mRequestQueue;        }    }        private static DefaultHttpClient getNewHttpClient() {        try {            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());            trustStore.load(null, null);            SSLSocketFactory sf = new MySSLSocketFactory(trustStore);            sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);            HttpParams params = new BasicHttpParams();            HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);            HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);            SchemeRegistry registry = new SchemeRegistry();            registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));            registry.register(new Scheme("https", sf, 443));            ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);            return new DefaultHttpClient(ccm, params);        } catch (Exception e) {            return new DefaultHttpClient();        }    }        public static CookieStore getCookieStore(){    	 synchronized (lock) {    		return mCookieStore;     	 }    }        public static void RequestCancell(Object tag){    	synchronized (lock) {            if (mRequestQueue != null) {                mRequestQueue.cancelAll(tag);            }        }    }        public static void RequestStart(){    	synchronized (lock) {            if (mRequestQueue != null) {                mRequestQueue.start();            }        }    }        public static void RequestStop(){    	synchronized (lock) {            if (mRequestQueue != null) {                mRequestQueue.stop();            }        }    }        public static CustomImageLoader getImageLoader(final Context context) {        if (mImageLoader == null) {            mImageLoader = new CustomImageLoader(getRequestQueue(context), new BitmapCache());        }        return mImageLoader;    }}